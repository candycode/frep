#extension GL_ARB_texture_rectangle : enable
uniform sampler2DRect depthMap;
uniform vec4 ssaoviewport;
uniform int ssao;


// d sampling step in pixels
/*uniform*/ float samplingStep = 1.;
// s half number of samples in each direction; total samples = ( 2 * s + 1 ) * ( 2 * s + 1 )
/*uniform*/ float halfSamples = 9.;

// returns occlusion at pixel x, y
float ComputeOcclusion( int x, int y, float zzz )
{

    float z = texture2DRect( depthMap, vec2( float(x), float(y) ) ).x;
    //float xc = 0.;
    //float yc = 0.;
    //float o = 1. - texture2DRect( depthMap, vec2( float(x) - xc, float(y) - yc ) ).x;
    //return o*o;
     //return 1. - texture2DRect( depthMap, vec2( float(x) - xc, float(y) - yc ) ).x;
    int occ = 0;
    float zt = 0.0;
    // attempt to correlate the radius and step with disatance from viewer; it really
    // depends on the object topology
    int step = int( samplingStep ); //int( max( 1.0, samplingStep * ( 1.0 - .3 * z ) ) );
    int hs = int( halfSamples ); //int( max( 1.0, float( halfSamples ) * ( 1.0 - .5 * z ) ) );
    for( int i = -hs; i != hs + 1; ++i )
    {
      for( int j = -hs; j != hs + 1; ++j )
      {
        if( i == 0 && j == 0 ) continue;
        float zz = texture2DRect( depthMap, vec2( float( x + step * i ), float( y + step * j ) ) ).x;
        //if( zz < MAX_Z )
        {
	  zt += zz;
	  ++occ;
	}
      }
    }
   //If z > 0 it means the fragment is behind (further away from the viewpoint) the neighboring fragments (pixels).
   //The distance between the fragment and the average of its neighbors is considered an occlusion value to be
   //subtracted from or multiplied by the pixel luminance/color.
   float o = z - zt / float( occ );
   o = sign( o ) * sqrt( abs( o ) );
   return 1. - sqrt( smoothstep( -.2, 0.5, o ) );	
}

vec4 $1_Color(vec3 P, vec3 N );

vec4 ComputeColor(vec3 P, vec3 N )
{

  if( !bool( ssao ) ) return vec4( 1., 0., 0., 1. );
  vec4 color = $1_Color(P, N);
  float l = ComputeOcclusion( int( gl_FragCoord.x ), int( gl_FragCoord.y ), gl_FragCoord.z );
  //return vec4( vec3( l ), 1. );
  return vec4( color.rgb * (vec3( l ) ), color.a );
 
}


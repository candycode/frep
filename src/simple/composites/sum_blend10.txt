
uniform mat4 $1_Mi;
uniform mat4 $2_Mi;
uniform mat4 $3_Mi;
uniform mat4 $4_Mi;
uniform mat4 $5_Mi;
uniform mat4 $6_Mi;
uniform mat4 $7_Mi;
uniform mat4 $8_Mi;
uniform mat4 $9_Mi;
uniform mat4 $10_Mi;


float $1_F( vec3 );
float $2_F( vec3 );
float $3_F( vec3 );
float $4_F( vec3 );
float $5_F( vec3 );
float $6_F( vec3 );
float $7_F( vec3 );
float $8_F( vec3 );
float $9_F( vec3 );
float $10_F( vec3 );

uniform float deltaStep;

float blend( float v )
{
    //if( abs( v ) < 0.00001 ) return 1.;
    return ( exp( -v ) );
}

float composite_F( vec3 v )
{
  const float a = 10.;
  vec4 p = vec4( v, 1.0 );
  float f1 = $1_F( $1_Mi * p );
  float f2 = $2_F( $2_Mi * p );
  float f3 = $3_F( $3_Mi * p );
  float f4 = $4_F( $4_Mi * p );
  float f5 = $1_F( $5_Mi * p );
  float f6 = $2_F( $6_Mi * p );
  float f7 = $3_F( $7_Mi * p );
  float f8 = $4_F( $8_Mi * p );
  float f9 = $3_F( $9_Mi * p );
  float f10 = $4_F( $10_Mi * p );
  float f = -( f1 + f2 + f3 + f4 + f5 + f6 + f7 + f8 + f9 + f10 ) + .1;
  return f;
  //return f - blend( f );
  //float f = -f1 -f2 -f3 -f4 - 1.9;
  //return f - 0.1 * blend( abs(f) );
}

vec3 composite_G( in vec3 p )
{
    float tstep = deltaStep;
    float dfdz = composite_F( p + vec3( 0., 0., tstep ) ) - composite_F( p + vec3( 0., 0., -tstep ) );
    float dfdy = composite_F( p + vec3( 0., tstep, 0. ) ) - composite_F( p + vec3( 0., -tstep, 0. ) );
    float dfdx = composite_F( p + vec3( tstep, 0., 0. ) ) - composite_F( p + vec3( -tstep, 0., 0. ) );
    return 0.5 * vec3( dfdx, dfdy, dfdz ) / tstep; 
}
/*vec3 composite_G( vec3 v )
{
  vec4 p = vec4( v, 1.0 );
  float f1 = $1_F( $1_Mi * p );
  float f2 = $2_F( $2_Mi * p );
  float f3 = $3_F( $3_Mi * p );
  float mf = min( f1, min( f2, f3 ) );
  if( mf == f1 ) return $1_G( $1_Mi * p );
  else if( mf == f2 ) return -$2_G( $2_Mi * p );
  else return -$3_G( $3_Mi * p );
}*/
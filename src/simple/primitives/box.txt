uniform float deltaStep;

float $F_blend( float f1, float f2, float f3 )
{
  // generic
  //const float a0 =0.08;
  //const float b0 =.4;
  //const float b1 =.4;
  // box
  const float a0 =0.06;
  const float b0 =.04;
  const float b1 =.04;
  const float b2 =.04;
  return a0 / ( 1. + (f1*f1/b0) + (f2*f2/b1) + (f3*f3/b2));
}

float $F( vec3 p )
{
  float f1 = p.x * p.x - 0.25;
  float f2 = p.y * p.y - 0.25;
  float f3 = p.z * p.z - 0.25;
  return max( f1, max( f2, f3  ) );// + $F_blend( f1, f2, f3 );
  //return pow( p.x, 14.0 ) + pow( p.y, 14.0 ) + pow( p.z, 14.0 ) - pow( 0.4, 14.0 ) ;	
}

vec3 $G( vec3 p )
{
    float tstep = deltaStep;
    float dfdx = $F( p + vec3( 0., 0., tstep ) ) - $F( p + vec3( 0., 0., -tstep ) );
    float dfdy = $F( p + vec3( 0., tstep, 0. ) ) - $F( p + vec3( 0., -tstep, 0. ) );
    float dfdz = $F( p + vec3( tstep, 0., 0. ) ) - $F( p + vec3( -tstep, 0., 0. ) );
    return 0.5 * vec3( dfdx, dfdy, dfdz ) / tstep; 
}
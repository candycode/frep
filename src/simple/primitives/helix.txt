//#extension GL_NV_gpu_shader_fp64 : enable

float $F( vec3 p )
{
  return p.x - cos( 6. * p.z ) - p.y + sin( 6. * p.z ) - .1;
}

vec3 $G( vec3 p )
{
  return vec3( 1., -1., 6. * ( sin( 6. * p.z ) + cos( 6. * p.z ) ) );
}



#define IsZero(D) (abs(D)<0.00001)
#define M_PI 3.14159265
#define cbrt(x) pow(x, -1./3.)

int SolveQuadric( vec4 c, vec3 s)
{
    float p, q, D;

    /* normal form: x^2 + px + q = 0 */

    p = c[ 1 ] / (2. * c[ 2 ]);
    q = c[ 0 ] / c[ 2 ];

    D = p * p - q;

    if (IsZero(D))
    {
	s[ 0 ] = - p;
	return 1;
    }
    else if (D < 0)
    {
	return 0;
    }
    else if (D > 0)
    {
	float sqrt_D = sqrt(D);

	s[ 0 ] =   sqrt_D - p;
	s[ 1 ] = - sqrt_D - p;
	return 2;
    }
}


int SolveCubic( in vec4 c, out vec3 s)
{
    int     i, num;
    float  sub;
    float  A, B, C;
    float  sq_A, p, q;
    float  cb_p, D;
    
    num = 0;

    /* normal form: x^3 + Ax^2 + Bx + C = 0 */

    A = c.z / c.w;
    B = c.y / c.w;
    C = c.x / c.w;

    /*  substitute x = y - A/3 to eliminate quadric term:
	x^3 +px + q = 0 */

    sq_A = A * A;
    p = 1.0/3. * (- 1.0/3. * sq_A + B);
    q = 1.0/2. * (2.0/27. * A * sq_A - 1.0/3. * A * B + C);

    /* use Cardano's formula */

    cb_p = p * p * p;
    D = q * q + cb_p;

    if (IsZero(D))
    {
	if (IsZero(q)) /* one triple solution */
	{
	    s.x = 0.;
	    num = 1;
	}
	else /* one single and one double solution */
	{
	    float u = cbrt(-q);
	    s.x = 2. * u;
	    s.y = - u;
	    num = 2;
	}
    }
    else if (D < 0.) /* Casus irreducibilis: three real solutions */
    {
	float phi = 1.0/3. * acos(-q / sqrt(-cb_p));
	float t = 2. * sqrt(-p);

	s.x =   t * cos(phi);
	s.y = - t * cos(phi + M_PI / 3);
	s.z = - t * cos(phi - M_PI / 3);
	num = 3;
    }
    else /* one real solution */
    {
	float sqrt_D = sqrt(D);
	float u = cbrt(sqrt_D - q);
	float v = -cbrt(sqrt_D + q);

	s.x = u + v;
	num = 1;
    }

    /* resubstitute */

    sub = 1.0/3. * A;

    for (i = 0; i != num; ++i)
	s[ i ] -= sub;

    return num;
}
